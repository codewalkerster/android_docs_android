From 915d55b800577e6bb02f4f7be7e25013a1c2a0bd Mon Sep 17 00:00:00 2001
From: libin <bin.li@rock-chips.com>
Date: Mon, 27 Dec 2021 10:57:36 +0800
Subject: [PATCH 4/4] Eink every frame update must ensure that there is an
 update before and after the frame.

fix lock screen interface sometimes show system interface first

Signed-off-by: libin <bin.li@rock-chips.com>
Change-Id: I0b3f9d229a70630cbf3cd74dd4aaf0a405eabbcf
---
 einkcompositorworker.cpp | 81 ++++++++++++++++++++++++----------------
 einkcompositorworker.h   |  2 +
 2 files changed, 50 insertions(+), 33 deletions(-)

diff --git a/einkcompositorworker.cpp b/einkcompositorworker.cpp
index 1b61447..6ceb5bb 100755
--- a/einkcompositorworker.cpp
+++ b/einkcompositorworker.cpp
@@ -231,40 +231,55 @@ void EinkCompositorWorker::QueueComposite(hwc_display_contents_1_t *dc,int Curre
 
   for (size_t i = 0; i < dc->numHwLayers; ++i) {
     hwc_layer_1_t *layer = &dc->hwLayers[i];
-  if (layer != NULL && layer->handle != NULL && layer->compositionType == HWC_FRAMEBUFFER_TARGET){
-    composition->layer_acquire_fences.emplace_back(layer->acquireFenceFd);
-    layer->acquireFenceFd = -1;
-    if (layer->releaseFenceFd >= 0)
-      close(layer->releaseFenceFd);
-    layer->releaseFenceFd = CreateNextTimelineFence();
-    composition->fb_handle = layer->handle;
-    composition->einkMode = CurrentEpdMode;
-
-    composition->release_timeline = timeline_;
-
-    Lock();
-    int ret = pthread_mutex_lock(&eink_lock_);
-    if (ret) {
-      ALOGE("Failed to acquire compositor lock %d", ret);
-    }
-
-    while (composite_queue_.size() >= kMaxQueueDepth) {
-      Unlock();
-      pthread_cond_wait(&eink_queue_cond_,&eink_lock_);
-      Lock();
-    }
-
-    composite_queue_.push(std::move(composition));
-
-    ret = pthread_mutex_unlock(&eink_lock_);
-    if (ret)
-      ALOGE("Failed to release compositor lock %d", ret);
-
-    SignalLocked();
-    Unlock();
+    if (layer != NULL && layer->handle != NULL && layer->compositionType == HWC_FRAMEBUFFER_TARGET){
+      // 送显图层必须与上一帧有差别，才可以往屏端更新
+      if(layer->handle != last_fb_handle){
+        composition->layer_acquire_fences.emplace_back(layer->acquireFenceFd);
+        layer->acquireFenceFd = -1;
+        if (layer->releaseFenceFd >= 0)
+          close(layer->releaseFenceFd);
+        layer->releaseFenceFd = CreateNextTimelineFence();
+        composition->fb_handle = layer->handle;
+        last_fb_handle = layer->handle;
+
+        if(last_fb_handle_mode == EPD_RESUME){
+          composition->einkMode = EPD_RESUME;
+          last_fb_handle_mode = EPD_NULL;
+          ALOGI("rk-debug force set EPD_RESUME");
+        }else{
+          composition->einkMode = CurrentEpdMode;
+        }
+
+        composition->release_timeline = timeline_;
+
+        Lock();
+        int ret = pthread_mutex_lock(&eink_lock_);
+        if (ret) {
+          ALOGE("Failed to acquire compositor lock %d", ret);
+        }
+
+        while (composite_queue_.size() >= kMaxQueueDepth) {
+          Unlock();
+          pthread_cond_wait(&eink_queue_cond_,&eink_lock_);
+          Lock();
+        }
+
+        composite_queue_.push(std::move(composition));
+
+        ret = pthread_mutex_unlock(&eink_lock_);
+        if (ret)
+          ALOGE("Failed to release compositor lock %d", ret);
+
+        SignalLocked();
+        Unlock();
+      }else{
+        ALOGI("rk-debug fb-handle is same");
+        if(CurrentEpdMode == EPD_RESUME){
+          last_fb_handle_mode = EPD_RESUME;
+        }
+      }
     }
   }
-
 }
 
 void EinkCompositorWorker::Routine() {
@@ -1216,7 +1231,7 @@ int EinkCompositorWorker::EinkCommit(int epd_mode) {
   gLastEpdMode = epd_mode;
   return 0;
 }
- 
+
 int EinkCompositorWorker::Y4Commit(int epd_mode) {
   Rect screen_rect = Rect(0, 0, ebc_buf_info.width, ebc_buf_info.height);
   int *gray16_buffer_bak = gray16_buffer;
diff --git a/einkcompositorworker.h b/einkcompositorworker.h
index d942e0a..2b1ee81 100755
--- a/einkcompositorworker.h
+++ b/einkcompositorworker.h
@@ -226,6 +226,8 @@ class EinkCompositorWorker : public Worker {
   int *gray256_new_buffer = NULL;
   char* rga_output_addr = NULL;
   bool rgba_to_y4_by_rga = false;
+  buffer_handle_t last_fb_handle = NULL;
+  int last_fb_handle_mode = EPD_PART_GC16;
 };
 }
 
-- 
2.17.1

